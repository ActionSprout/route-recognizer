{"version":3,"file":null,"sources":["route-recognizer/dsl.ts","route-recognizer/normalizer.ts","route-recognizer.ts"],"sourcesContent":["export interface Delegate {\n  contextEntered?(context: string, route: MatchDSL): void;\n  willAddRoute?(context: string | undefined, route: string): string;\n}\n\nexport interface Route {\n  path: string;\n  handler: any;\n  queryParams?: string[];\n}\n\nexport interface RouteRecognizer {\n  delegate: Delegate | undefined;\n  add(routes: Route[]): void;\n}\n\nexport interface MatchCallback {\n  (match: MatchDSL): void;\n}\n\nexport interface MatchDSL {\n  (path: string): ToDSL;\n  (path: string, callback: MatchCallback): void;\n}\n\nexport interface ToDSL {\n  to(name: string, callback?: MatchCallback): void;\n}\n\nclass Target implements ToDSL {\n  path: string;\n  matcher: Matcher;\n  delegate: Delegate | undefined;\n\n  constructor(path: string, matcher: Matcher, delegate: Delegate | undefined) {\n    this.path = path;\n    this.matcher = matcher;\n    this.delegate = delegate;\n  }\n\n  to(target: string, callback: MatchCallback) {\n    let delegate = this.delegate;\n\n    if (delegate && delegate.willAddRoute) {\n      target = delegate.willAddRoute(this.matcher.target, target);\n    }\n\n    this.matcher.add(this.path, target);\n\n    if (callback) {\n      if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n      this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n  }\n}\n\nexport class Matcher {\n  routes: {\n    [path: string]: string | undefined;\n  };\n  children: {\n    [path: string]: Matcher | undefined;\n  };\n  target: string | undefined;\n\n  constructor(target?: string) {\n    this.routes = {};\n    this.children = {};\n    this.target = target;\n  }\n\n  add(path: string, target: string) {\n    this.routes[path] = target;\n  }\n\n  addChild(path: string, target: string, callback: MatchCallback, delegate: Delegate | undefined) {\n    let matcher = new Matcher(target);\n    this.children[path] = matcher;\n\n    let match = generateMatch(path, matcher, delegate);\n\n    if (delegate && delegate.contextEntered) {\n      delegate.contextEntered(target, match);\n    }\n\n    callback(match);\n  }\n}\n\nfunction generateMatch(startingPath: string, matcher: Matcher, delegate: Delegate | undefined): MatchDSL {\n  function match(path: string): ToDSL;\n  function match(path: string, callback: MatchCallback): void;\n  function match(path: string, callback?: MatchCallback): ToDSL | void {\n    let fullPath = startingPath + path;\n    if (callback) {\n      callback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(fullPath, matcher, delegate);\n    }\n  };\n  return match;\n}\n\nfunction addRoute(routeArray: Route[], path: string, handler: any) {\n  let len = 0;\n  for (let i = 0; i < routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  let route = { path: path, handler: handler };\n  routeArray.push(route);\n}\n\nfunction eachRoute<T>(baseRoute: Route[], matcher: Matcher, callback: (this: T, routes: Route[]) => void, binding: T) {\n  let routes = matcher.routes;\n\n  for (let path in routes) {\n    if (routes.hasOwnProperty(path)) {\n      let routeArray = baseRoute.slice();\n      addRoute(routeArray, path, routes[path]);\n\n      let nested = matcher.children[path];\n      if (nested) {\n        eachRoute(routeArray, nested, callback, binding);\n      } else {\n        callback.call(binding, routeArray);\n      }\n    }\n  }\n}\n\nexport default function <T extends RouteRecognizer>(this: T, callback: MatchCallback, addRouteCallback?: (routeRecognizer: T, routes: Route[]) => void) {\n  let matcher = new Matcher();\n\n  callback(generateMatch(\"\", matcher, this.delegate));\n\n  eachRoute([], matcher, function(routes: Route[]) {\n    if (addRouteCallback) { addRouteCallback(this, routes); }\n    else { this.add(routes); }\n  }, this);\n}\n","// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\nexport function normalizePath(path: string): string {\n  return path.split(\"/\")\n             .map(normalizeSegment)\n             .join(\"/\");\n}\n\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nlet SEGMENT_RESERVED_CHARS = /%|\\//g;\nexport function normalizeSegment(segment: string) {\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nlet PATH_SEGMENT_ENCODINGS = /%(?:24|26|2B|2C|3B|3D|3A|40)/g;\n\nexport function encodePathSegment(str: string) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n","import map, { Delegate, Route, MatchDSL } from \"./route-recognizer/dsl\";\nimport { normalizePath, normalizeSegment, encodePathSegment } from \"./route-recognizer/normalizer\";\n\nconst specials = [\n  \"/\", \".\", \"*\", \"+\", \"?\", \"|\",\n  \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"\\\\\"\n];\n\nconst escapeRegex = new RegExp(\"(\\\\\" + specials.join(\"|\\\\\") + \")\", \"g\");\n\nconst isArray = Array.isArray || function isArray(arg: any): arg is any[] {\n  return Object.prototype.toString.call(arg) === \"[object Array]\";\n};\n\nfunction getParam(params: Params | null | undefined, key: string): string {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!params.hasOwnProperty(key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  let value = params[key];\n  let str = typeof value === \"string\" ? value : \"\" + value;\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n  return str;\n}\n\nconst enum SegmentType {\n  Static,\n  Dynamic,\n  Star,\n  Epsilon\n}\n\n// A Segment represents a segment in the original route description.\n// Each Segment type provides an `eachChar` and `regex` method.\n//\n// The `eachChar` method invokes the callback with one or more character\n// specifications. A character specification consumes one or more input\n// characters.\n//\n// The `regex` method returns a regex fragment for the segment. If the\n// segment is a dynamic of star segment, the regex fragment also includes\n// a capture.\n//\n// A character specification contains:\n//\n// * `validChars`: a String with a list of all valid characters, or\n// * `invalidChars`: a String with a list of all invalid characters\n// * `repeat`: true if the character specification can repeat\nclass StaticSegment {\n  type: SegmentType.Static;\n  string: string;\n\n  constructor(str: string) {\n    this.string = normalizeSegment(str);\n  }\n\n  eachChar(currentState: State) {\n    let str = this.string, ch;\n\n    for (let i = 0; i < str.length; i++) {\n      ch = str.charAt(i);\n      currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: ch });\n    }\n\n    return currentState;\n  }\n\n  regex() {\n    return this.string.replace(escapeRegex, \"\\\\$1\");\n  }\n\n  generate(_?: Params | null) {\n    return this.string;\n  }\n}\n\nclass DynamicSegment {\n  type: SegmentType.Dynamic;\n  name: string;\n  constructor(name: string) {\n    this.name = normalizeSegment(name);\n  }\n\n  eachChar(currentState: State) {\n    return currentState.put({ invalidChars: \"/\", repeat: true, validChars: undefined });\n  }\n\n  regex() {\n    return \"([^/]+)\";\n  }\n\n  generate(params?: Params | null) {\n    let value = getParam(params, this.name);\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      return encodePathSegment(value);\n    } else {\n      return value;\n    }\n  }\n}\n\nclass StarSegment {\n  type: SegmentType.Star;\n  constructor(public name: string) {}\n\n  eachChar(currentState: State) {\n    return currentState.put({\n      invalidChars: \"\",\n      repeat: true,\n      validChars: undefined\n    });\n  }\n\n  regex() {\n    return \"(.+)\";\n  }\n\n  generate(params?: Params | null): string {\n    return getParam(params, this.name);\n  }\n}\n\nclass EpsilonSegment {\n  type: SegmentType.Epsilon;\n  eachChar(currentState: State) {\n    return currentState;\n  }\n  regex(): string {\n    return \"\";\n  }\n  generate(): string {\n    return \"\";\n  }\n}\n\nexport interface Params {\n  [key: string]: any | undefined;\n  [key: number]: any | undefined;\n  queryParams?: QueryParams | null;\n}\n\ntype Segment = StaticSegment | DynamicSegment | StarSegment | EpsilonSegment;\n\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(route: string, names: string[], types: Types, shouldDecodes: boolean[]): Segment[] {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.charAt(0) === \"/\") { route = route.substr(1); }\n\n  let segments = route.split(\"/\");\n  let results = new Array(segments.length);\n\n  for (let i = 0; i < segments.length; i++) {\n    let segment = segments[i], match;\n\n    if (match = segment.match(/^:([^\\/]+)$/)) {\n      results[i] = new DynamicSegment(match[1]);\n      names.push(match[1]);\n      shouldDecodes.push(true);\n      types.dynamics++;\n    } else if (match = segment.match(/^\\*([^\\/]+)$/)) {\n      results[i] = new StarSegment(match[1]);\n      names.push(match[1]);\n      shouldDecodes.push(false);\n      types.stars++;\n    } else if (segment === \"\") {\n      results[i] = new EpsilonSegment();\n    } else {\n      results[i] = new StaticSegment(segment);\n      types.statics++;\n    }\n  }\n\n  return results;\n}\n\nfunction isEqualCharSpec(specA: CharSpec | undefined, specB: CharSpec) {\n  return specA && specA.validChars === specB.validChars &&\n         specA.invalidChars === specB.invalidChars;\n}\n\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\n\nclass State {\n  nextStates: State[];\n  charSpec: CharSpec | undefined;\n  regex: RegExp | undefined;\n  handlers: any[] | undefined;\n  types: Types | undefined;\n\n  constructor (charSpec?: CharSpec) {\n    this.charSpec = charSpec;\n    this.nextStates = [];\n    this.regex = undefined;\n    this.handlers = undefined;\n    this.types = undefined;\n  }\n\n  get(charSpec: CharSpec): State | void {\n    let nextStates = this.nextStates;\n\n    for (let i = 0; i < nextStates.length; i++) {\n      let child = nextStates[i];\n\n      if (isEqualCharSpec(child.charSpec, charSpec)) {\n        return child;\n      }\n    }\n  }\n\n  put(charSpec: CharSpec) {\n    let state;\n\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(charSpec)) { return state; }\n\n    // Make a new state for the character spec\n    state = new State(charSpec);\n\n    // Insert the new state as a child of the current state\n    this.nextStates.push(state);\n\n    // If this character specification repeats, insert the new state as a child\n    // of itself. Note that this will not trigger an infinite loop because each\n    // transition during recognition consumes a character.\n    if (charSpec.repeat) {\n      state.nextStates.push(state);\n    }\n\n    // Return the new state\n    return state;\n  }\n\n  // Find a list of child states matching the next character\n  match(ch: string) {\n    let nextStates = this.nextStates,\n        child, charSpec, chars;\n\n    let returned: State[] = [];\n\n    for (let i = 0; i < nextStates.length; i++) {\n      child = nextStates[i];\n\n      charSpec = child.charSpec;\n\n      if (typeof (chars = charSpec && charSpec.validChars) !== \"undefined\") {\n        if (chars.indexOf(ch) !== -1) { returned.push(child); }\n      } else if (typeof (chars = charSpec && charSpec.invalidChars) !== \"undefined\") {\n        if (chars.indexOf(ch) === -1) { returned.push(child); }\n      }\n    }\n\n    return returned;\n  }\n}\n\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states: State[]) {\n  return states.sort(function(a, b) {\n    if (!a.types) {\n      return b.types ? -1 : 0;\n    } else if (!b.types) {\n      return 1;\n    }\n    if (a.types.stars !== b.types.stars) { return a.types.stars - b.types.stars; }\n\n    if (a.types.stars) {\n      if (a.types.statics !== b.types.statics) { return b.types.statics - a.types.statics; }\n      if (a.types.dynamics !== b.types.dynamics) { return b.types.dynamics - a.types.dynamics; }\n    }\n\n    if (a.types.dynamics !== b.types.dynamics) { return a.types.dynamics - b.types.dynamics; }\n    if (a.types.statics !== b.types.statics) { return b.types.statics - a.types.statics; }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states: State[], ch: string) {\n  let nextStates: State[] = [];\n\n  for (let i = 0, l = states.length; i < l; i++) {\n    let state = states[i];\n\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\n\nexport interface QueryParams {\n  [param: string]: any[] | any | null | undefined;\n}\n\nexport interface Result {\n  handler: any;\n  params: Params;\n  isDynamic: boolean;\n}\n\nexport interface Results {\n  queryParams: QueryParams;\n  [index: number]: Result | undefined;\n  length: number;\n  slice(start?: number, end?: number): Result[];\n  splice(start: number, deleteCount: number, ...items: Result[]): Result[];\n  push(...results: Result[]): number;\n}\n\nclass RecognizeResults {\n  queryParams: QueryParams;\n  splice = Array.prototype.splice;\n  slice =  Array.prototype.slice;\n  push = Array.prototype.push;\n  length = 0;\n  [index: number]: any | undefined;\n\n  constructor(queryParams?: QueryParams | undefined) {\n    this.queryParams = queryParams || {};\n  }\n};\n\nfunction findHandler(state: State, originalPath: string, queryParams: QueryParams): Results {\n  let handlers = state.handlers;\n  let regex = state.regex;\n  if (!regex || !handlers) throw new Error(\"state not initialized\");\n  let captures: RegExpMatchArray | null = originalPath.match(regex);\n  let currentCapture = 1;\n  let result = new RecognizeResults(queryParams);\n\n  result.length = handlers.length;\n\n  for (let i = 0; i < handlers.length; i++) {\n    let handler = handlers[i];\n    let names = handler.names;\n    let shouldDecodes = handler.shouldDecodes;\n    let params: Params = {};\n    let name, shouldDecode, capture;\n\n    for (let j = 0; j < names.length; j++) {\n      name = names[j];\n      shouldDecode = shouldDecodes[j];\n      if (!captures) throw Error(\"expected params\");\n      capture = captures[currentCapture++];\n\n      if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n        if (shouldDecode) {\n          params[name] = decodeURIComponent(capture);\n        } else {\n          params[name] = capture;\n        }\n      } else {\n        params[name] = capture;\n      }\n    }\n\n    result[i] = { handler: handler.handler, params: params, isDynamic: !!names.length };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part: string): string {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, \"%20\");\n  let result;\n  try {\n    result = decodeURIComponent(part);\n  } catch (error) {result = \"\"; }\n  return result;\n}\n\ninterface NamedRoute {\n  segments: Segment[];\n  handlers: any[];\n}\n\nclass RouteRecognizer {\n  private rootState: State;\n  private names: {\n    [name: string]: NamedRoute | undefined;\n  };\n  map: (context: (match: MatchDSL) => void, addCallback?: (router: this, routes: Route[]) => void) => void = map;\n\n  delegate: Delegate | undefined;\n\n  static VERSION = \"0.3.0\";\n  // Set to false to opt-out of encoding and decoding path segments.\n  // See https://github.com/tildeio/route-recognizer/pull/55\n  static ENCODE_AND_DECODE_PATH_SEGMENTS = true;\n  static Normalizer = {\n    normalizeSegment, normalizePath, encodePathSegment\n  };\n\n  constructor() {\n    this.rootState = new State();\n    this.names = {};\n  }\n\n  add(routes: Route[], options?: { as: string }) {\n    let currentState = this.rootState;\n    let regex = \"^\";\n    let types = { statics: 0, dynamics: 0, stars: 0 };\n    let handlers: any[] = new Array(routes.length);\n    let allSegments: Segment[] = [];\n    let name: string | undefined;\n\n    let isEmpty = true;\n\n    for (let i = 0; i < routes.length; i++) {\n      let route = routes[i];\n      let names: string[] = [];\n      let shouldDecodes: boolean[] = [];\n\n      let segments = parse(route.path, names, types, shouldDecodes);\n\n      allSegments = allSegments.concat(segments);\n\n      for (let j = 0; j < segments.length; j++) {\n        let segment = segments[j];\n\n        if (segment instanceof EpsilonSegment) { continue; }\n\n        isEmpty = false;\n\n        // Add a \"/\" for the new segment\n        currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: \"/\" });\n        regex += \"/\";\n\n        // Add a representation of the segment to the NFA and regex\n        currentState = segment.eachChar(currentState);\n        regex += segment.regex();\n      }\n      let handler = { handler: route.handler, names: names, shouldDecodes: shouldDecodes };\n      handlers[i] = handler;\n    }\n\n    if (isEmpty) {\n      currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: \"/\" });\n      regex += \"/\";\n    }\n\n    currentState.handlers = handlers;\n    currentState.regex = new RegExp(regex + \"$\");\n    currentState.types = types;\n\n    if (typeof options === \"object\" && options !== null && options.hasOwnProperty(\"as\")) {\n      name = options.as;\n    }\n\n    if (name && this.names.hasOwnProperty(name)) {\n      throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n    }\n\n    if (name = options && options.as) {\n      this.names[name] = {\n        segments: allSegments,\n        handlers: handlers\n      };\n    }\n  }\n\n  handlersFor(name: string) {\n    let route = this.names[name];\n\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let result = new Array(route.handlers.length);\n\n    for (let i = 0; i < route.handlers.length; i++) {\n      result[i] = route.handlers[i];\n    }\n\n    return result;\n  }\n\n  hasRoute(name: string) {\n    return !!this.names[name];\n  }\n\n  generate(name: string, params?: Params | null) {\n    let route = this.names[name];\n    let output = \"\";\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    let segments: Segment[] = route.segments;\n\n    for (let i = 0; i < segments.length; i++) {\n      let segment: Segment = segments[i];\n\n      if (segment instanceof EpsilonSegment) {\n        continue;\n      }\n\n      output += \"/\";\n      output += segment.generate(params);\n    }\n\n    if (output.charAt(0) !== \"/\") { output = \"/\" + output; }\n\n    if (params && params.queryParams) {\n      output += this.generateQueryString(params.queryParams);\n    }\n\n    return output;\n  }\n\n  generateQueryString(params: QueryParams) {\n    let pairs: string[] = [];\n    let keys: string[] = [];\n    for (let key in params) {\n      if (params.hasOwnProperty(key)) {\n        keys.push(key);\n      }\n    }\n    keys.sort();\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = params[key];\n      if (value == null) {\n        continue;\n      }\n      let pair = encodeURIComponent(key);\n      if (isArray(value)) {\n        for (let j = 0; j < value.length; j++) {\n          let arrayPair = key + \"[]\" + \"=\" + encodeURIComponent(value[j]);\n          pairs.push(arrayPair);\n        }\n      } else {\n        pair += \"=\" + encodeURIComponent(value);\n        pairs.push(pair);\n      }\n    }\n\n    if (pairs.length === 0) { return \"\"; }\n\n    return \"?\" + pairs.join(\"&\");\n  }\n\n  parseQueryString(queryString: string): QueryParams {\n    let pairs = queryString.split(\"&\");\n    let queryParams: QueryParams = {};\n    for (let i = 0; i < pairs.length; i++) {\n      let pair      = pairs[i].split(\"=\"),\n          key       = decodeQueryParamPart(pair[0]),\n          keyLength = key.length,\n          isArray = false,\n          value;\n      if (pair.length === 1) {\n        value = \"true\";\n      } else {\n        // Handle arrays\n        if (keyLength > 2 && key.slice(keyLength - 2) === \"[]\") {\n          isArray = true;\n          key = key.slice(0, keyLength - 2);\n          if (!queryParams[key]) {\n            queryParams[key] = [];\n          }\n        }\n        value = pair[1] ? decodeQueryParamPart(pair[1]) : \"\";\n      }\n      if (isArray) {\n        (<string[]>queryParams[key]).push(value);\n      } else {\n        queryParams[key] = value;\n      }\n    }\n    return queryParams;\n  }\n\n  recognize(path: string): Results | undefined {\n    let results: Results | undefined;\n    let states: State[] = [ this.rootState ];\n    let queryParams = {};\n    let isSlashDropped = false;\n    let hashStart = path.indexOf(\"#\");\n    if (hashStart !== -1) {\n      path = path.substr(0, hashStart);\n    }\n\n    let queryStart = path.indexOf(\"?\");\n    if (queryStart !== -1) {\n      let queryString = path.substr(queryStart + 1, path.length);\n      path = path.substr(0, queryStart);\n      queryParams = this.parseQueryString(queryString);\n    }\n\n    if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n    let originalPath = path;\n\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      path = normalizePath(path);\n    } else {\n      path = decodeURI(path);\n      originalPath = decodeURI(originalPath);\n    }\n\n    let pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n      path = path.substr(0, pathLen - 1);\n      originalPath = originalPath.substr(0, originalPath.length - 1);\n      isSlashDropped = true;\n    }\n\n    for (let i = 0; i < path.length; i++) {\n      states = recognizeChar(states, path.charAt(i));\n      if (!states.length) { break; }\n    }\n\n    let solutions: State[] = [];\n    for (let i = 0; i < states.length; i++) {\n      if (states[i].handlers) { solutions.push(states[i]); }\n    }\n\n    states = sortSolutions(solutions);\n\n    let state = solutions[0];\n\n    if (state && state.handlers) {\n      // if a trailing slash was dropped and a star segment is the last segment\n      // specified, put the trailing slash back\n      if (isSlashDropped && state.regex && state.regex.source.slice(-5) === \"(.+)$\") {\n        originalPath = originalPath + \"/\";\n      }\n      results = findHandler(state, originalPath, queryParams);\n    }\n\n    return results;\n  }\n}\n\nexport default RouteRecognizer;\n\ninterface Types {\n  statics: number;\n  dynamics: number;\n  stars: number;\n}\n\ninterface CharSpec {\n  validChars: string | undefined;\n  invalidChars: string | undefined;\n  repeat: boolean;\n}"],"names":["let","const","key","i"],"mappings":"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"}