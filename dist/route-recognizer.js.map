{"version":3,"file":null,"sources":["route-recognizer/dsl.ts","route-recognizer/normalizer.ts","route-recognizer.ts"],"sourcesContent":["function Target(path, matcher, delegate) {\n  this.path = path;\n  this.matcher = matcher;\n  this.delegate = delegate;\n}\n\nTarget.prototype = {\n  to: function(target, callback) {\n    var delegate = this.delegate;\n\n    if (delegate && delegate.willAddRoute) {\n      target = delegate.willAddRoute(this.matcher.target, target);\n    }\n\n    this.matcher.add(this.path, target);\n\n    if (callback) {\n      if (callback.length === 0) { throw new Error(\"You must have an argument in the function passed to `to`\"); }\n      this.matcher.addChild(this.path, target, callback, this.delegate);\n    }\n    return this;\n  }\n};\n\nclass Matcher {\n  routes: any;\n  children: any;\n  target: any;\n\n  constructor(target?: any) {\n    this.routes = {};\n    this.children = {};\n    this.target = target;\n  }\n\n  add(path, handler) {\n    this.routes[path] = handler;\n  }\n\n  addChild(path, target, callback, delegate) {\n    var matcher = new Matcher(target);\n    this.children[path] = matcher;\n\n    var match = generateMatch(path, matcher, delegate);\n\n    if (delegate && delegate.contextEntered) {\n      delegate.contextEntered(target, match);\n    }\n\n    callback(match);\n  }\n}\n\nfunction generateMatch(startingPath, matcher, delegate) {\n  return function(path, nestedCallback) {\n    var fullPath = startingPath + path;\n\n    if (nestedCallback) {\n      nestedCallback(generateMatch(fullPath, matcher, delegate));\n    } else {\n      return new Target(startingPath + path, matcher, delegate);\n    }\n  };\n}\n\nfunction addRoute(routeArray, path, handler) {\n  var len = 0;\n  for (var i=0; i<routeArray.length; i++) {\n    len += routeArray[i].path.length;\n  }\n\n  path = path.substr(len);\n  var route = { path: path, handler: handler };\n  routeArray.push(route);\n}\n\nfunction eachRoute(baseRoute, matcher, callback, binding) {\n  var routes = matcher.routes;\n\n  for (var path in routes) {\n    if (routes.hasOwnProperty(path)) {\n      var routeArray = baseRoute.slice();\n      addRoute(routeArray, path, routes[path]);\n\n      if (matcher.children[path]) {\n        eachRoute(routeArray, matcher.children[path], callback, binding);\n      } else {\n        callback.call(binding, routeArray);\n      }\n    }\n  }\n}\n\nexport default function(callback, addRouteCallback?) {\n  var matcher = new Matcher();\n\n  callback(generateMatch(\"\", matcher, this.delegate));\n\n  eachRoute([], matcher, function(route) {\n    if (addRouteCallback) { addRouteCallback(this, route); }\n    else { this.add(route); }\n  }, this);\n}\n","// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded\n// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved\n// chars are \"/\" and \"%\".\n// Safe to call multiple times on the same path.\nexport function normalizePath(path) {\n  return path.split('/')\n             .map(normalizeSegment)\n             .join('/');\n}\n\n// We want to ensure the characters \"%\" and \"/\" remain in percent-encoded\n// form when normalizing paths, so replace them with their encoded form after\n// decoding the rest of the path\nvar SEGMENT_RESERVED_CHARS = /%|\\//g;\nexport function normalizeSegment(segment) {\n  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);\n}\n\n// We do not want to encode these characters when generating dynamic path segments\n// See https://tools.ietf.org/html/rfc3986#section-3.3\n// sub-delims: \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\"\n// others allowed by RFC 3986: \":\", \"@\"\n//\n// First encode the entire path segment, then decode any of the encoded special chars.\n//\n// The chars \"!\", \"'\", \"(\", \")\", \"*\" do not get changed by `encodeURIComponent`,\n// so the possible encoded chars are:\n// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].\nvar PATH_SEGMENT_ENCODINGS = /%(?:24|26|2B|2C|3B|3D|3A|40)/g;\n\nexport function encodePathSegment(str) {\n  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);\n}\n","import map from './route-recognizer/dsl';\nimport { normalizePath, normalizeSegment, encodePathSegment } from './route-recognizer/normalizer';\n\nconst specials = [\n  '/', '.', '*', '+', '?', '|',\n  '(', ')', '[', ']', '{', '}', '\\\\'\n];\n\nconst escapeRegex = new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'g');\n\nconst isArray = Array.isArray || function isArray(value: any[]): value is Array<any> {\n  return Object.prototype.toString.call(value) === \"[object Array]\";\n}\n\nfunction getParam(params: any | undefined | null, key: any | undefined | null) {\n  if (typeof params !== \"object\" || params === null) {\n    throw new Error(\"You must pass an object as the second argument to `generate`.\");\n  }\n\n  if (!params.hasOwnProperty(key)) {\n    throw new Error(\"You must provide param `\" + key + \"` to `generate`.\");\n  }\n\n  let value = params[key];\n  let str = typeof value === \"string\" ? value : \"\" + value;\n  if (str.length === 0) {\n    throw new Error(\"You must provide a param `\" + key + \"`.\");\n  }\n  return str;\n}\n\n// A Segment represents a segment in the original route description.\n// Each Segment type provides an `eachChar` and `regex` method.\n//\n// The `eachChar` method invokes the callback with one or more character\n// specifications. A character specification consumes one or more input\n// characters.\n//\n// The `regex` method returns a regex fragment for the segment. If the\n// segment is a dynamic of star segment, the regex fragment also includes\n// a capture.\n//\n// A character specification contains:\n//\n// * `validChars`: a String with a list of all valid characters, or\n// * `invalidChars`: a String with a list of all invalid characters\n// * `repeat`: true if the character specification can repeat\nclass StaticSegment{\n  string: string;\n\n  constructor(string: string) {\n    this.string = normalizeSegment(string);\n  }\n\n  eachChar(currentState) {\n    var string = this.string, ch;\n\n    for (var i=0; i<string.length; i++) {\n      ch = string.charAt(i);\n      currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: ch });\n    }\n\n    return currentState;\n  }\n\n  regex() {\n    return this.string.replace(escapeRegex, '\\\\$1');\n  }\n\n  generate() {\n    return this.string;\n  }\n}\n\nclass DynamicSegment {\n  name: string;\n  constructor(name: string) {\n    this.name = normalizeSegment(name);\n  }\n\n  eachChar(currentState) {\n    return currentState.put({ invalidChars: \"/\", repeat: true, validChars: undefined });\n  }\n\n  regex() {\n    return \"([^/]+)\";\n  }\n\n  generate(params: string) {\n    var value = getParam(params, this.name);\n\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      return encodePathSegment(value);\n    } else {\n      return value;\n    }\n  }\n}\n\nfunction StarSegment(name) { this.name = name; }\nStarSegment.prototype = {\n  eachChar: function(currentState) {\n    return currentState.put({ invalidChars: \"\", repeat: true, validChars: undefined });\n  },\n\n  regex: function() {\n    return \"(.+)\";\n  },\n\n  generate: function(params) {\n    return getParam(params, this.name);\n  }\n};\n\nfunction EpsilonSegment() {}\nEpsilonSegment.prototype = {\n  eachChar: function(currentState) {\n    return currentState;\n  },\n  regex: function() { return \"\"; },\n  generate: function() { return \"\"; }\n};\n\n// The `names` will be populated with the paramter name for each dynamic/star\n// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star\n// segment, indicating whether it should be decoded during recognition.\nfunction parse(route, names, types, shouldDecodes) {\n  // normalize route as not starting with a \"/\". Recognition will\n  // also normalize.\n  if (route.charAt(0) === \"/\") { route = route.substr(1); }\n\n  var segments = route.split(\"/\");\n  var results = new Array(segments.length);\n\n  for (var i=0; i<segments.length; i++) {\n    var segment = segments[i], match;\n\n    if (match = segment.match(/^:([^\\/]+)$/)) {\n      results[i] = new DynamicSegment(match[1]);\n      names.push(match[1]);\n      shouldDecodes.push(true);\n      types.dynamics++;\n    } else if (match = segment.match(/^\\*([^\\/]+)$/)) {\n      results[i] = new StarSegment(match[1]);\n      names.push(match[1]);\n      shouldDecodes.push(false);\n      types.stars++;\n    } else if(segment === \"\") {\n      results[i] = new EpsilonSegment();\n    } else {\n      results[i] = new StaticSegment(segment);\n      types.statics++;\n    }\n  }\n\n  return results;\n}\n\nfunction isEqualCharSpec(specA, specB) {\n  return specA.validChars === specB.validChars &&\n         specA.invalidChars === specB.invalidChars;\n}\n\n// A State has a character specification and (`charSpec`) and a list of possible\n// subsequent states (`nextStates`).\n//\n// If a State is an accepting state, it will also have several additional\n// properties:\n//\n// * `regex`: A regular expression that is used to extract parameters from paths\n//   that reached this accepting state.\n// * `handlers`: Information on how to convert the list of captures into calls\n//   to registered handlers with the specified parameters\n// * `types`: How many static, dynamic or star segments in this route. Used to\n//   decide which route to use if multiple registered routes match a path.\n//\n// Currently, State is implemented naively by looping over `nextStates` and\n// comparing a character specification against a character. A more efficient\n// implementation would use a hash of keys pointing at one or more next states.\n\nclass State {\n  nextStates: any;\n  charSpec: any;\n  regex: any;\n  handlers: any;\n  specificity: any;\n  types: any;\n\n  constructor (charSpec?: any) {\n    this.charSpec = charSpec;\n    this.nextStates = [];\n    this.regex = undefined;\n    this.handlers = undefined;\n    this.specificity = undefined;\n  }\n\n  get(charSpec) {\n    var nextStates = this.nextStates;\n\n    for (var i=0; i<nextStates.length; i++) {\n      var child = nextStates[i];\n\n      if (isEqualCharSpec(child.charSpec, charSpec)) {\n        return child;\n      }\n    }\n  }\n\n  put(charSpec) {\n    var state;\n\n    // If the character specification already exists in a child of the current\n    // state, just return that state.\n    if (state = this.get(charSpec)) { return state; }\n\n    // Make a new state for the character spec\n    state = new State(charSpec);\n\n    // Insert the new state as a child of the current state\n    this.nextStates.push(state);\n\n    // If this character specification repeats, insert the new state as a child\n    // of itself. Note that this will not trigger an infinite loop because each\n    // transition during recognition consumes a character.\n    if (charSpec.repeat) {\n      state.nextStates.push(state);\n    }\n\n    // Return the new state\n    return state;\n  }\n\n  // Find a list of child states matching the next character\n  match(ch) {\n    var nextStates = this.nextStates,\n        child, charSpec, chars;\n\n    var returned: any[] = [];\n\n    for (var i=0; i<nextStates.length; i++) {\n      child = nextStates[i];\n\n      charSpec = child.charSpec;\n\n      if (typeof (chars = charSpec.validChars) !== 'undefined') {\n        if (chars.indexOf(ch) !== -1) { returned.push(child); }\n      } else if (typeof (chars = charSpec.invalidChars) !== 'undefined') {\n        if (chars.indexOf(ch) === -1) { returned.push(child); }\n      }\n    }\n\n    return returned;\n  }\n}\n\n// This is a somewhat naive strategy, but should work in a lot of cases\n// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.\n//\n// This strategy generally prefers more static and less dynamic matching.\n// Specifically, it\n//\n//  * prefers fewer stars to more, then\n//  * prefers using stars for less of the match to more, then\n//  * prefers fewer dynamic segments to more, then\n//  * prefers more static segments to more\nfunction sortSolutions(states) {\n  return states.sort(function(a, b) {\n    if (a.types.stars !== b.types.stars) { return a.types.stars - b.types.stars; }\n\n    if (a.types.stars) {\n      if (a.types.statics !== b.types.statics) { return b.types.statics - a.types.statics; }\n      if (a.types.dynamics !== b.types.dynamics) { return b.types.dynamics - a.types.dynamics; }\n    }\n\n    if (a.types.dynamics !== b.types.dynamics) { return a.types.dynamics - b.types.dynamics; }\n    if (a.types.statics !== b.types.statics) { return b.types.statics - a.types.statics; }\n\n    return 0;\n  });\n}\n\nfunction recognizeChar(states, ch) {\n  var nextStates = [];\n\n  for (var i=0, l=states.length; i<l; i++) {\n    var state = states[i];\n\n    nextStates = nextStates.concat(state.match(ch));\n  }\n\n  return nextStates;\n}\n\nvar oCreate = Object.create || function(proto) {\n  function F() {}\n  F.prototype = proto;\n  return new F();\n};\n\nfunction RecognizeResults(queryParams) {\n  this.queryParams = queryParams || {};\n}\nRecognizeResults.prototype = oCreate({\n  splice: Array.prototype.splice,\n  slice:  Array.prototype.slice,\n  push:   Array.prototype.push,\n  length: 0,\n  queryParams: null\n});\n\nfunction findHandler(state, originalPath, queryParams) {\n  var handlers = state.handlers, regex = state.regex;\n  var captures = originalPath.match(regex), currentCapture = 1;\n  var result = new RecognizeResults(queryParams);\n\n  result.length = handlers.length;\n\n  for (var i=0; i<handlers.length; i++) {\n    var handler = handlers[i], names = handler.names,\n      shouldDecodes = handler.shouldDecodes, params = {};\n    var name, shouldDecode, capture;\n\n    for (var j=0; j<names.length; j++) {\n      name = names[j];\n      shouldDecode = shouldDecodes[j];\n      capture = captures[currentCapture++];\n\n      if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n        if (shouldDecode) {\n          params[name] = decodeURIComponent(capture);\n        } else {\n          params[name] = capture;\n        }\n      } else {\n        params[name] = capture;\n      }\n    }\n\n    result[i] = { handler: handler.handler, params: params, isDynamic: !!names.length };\n  }\n\n  return result;\n}\n\nfunction decodeQueryParamPart(part) {\n  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1\n  part = part.replace(/\\+/gm, '%20');\n  var result;\n  try {\n    result = decodeURIComponent(part);\n  } catch(error) {result = '';}\n  return result;\n}\n\n// The main interface\n\nclass RouteRecognizer {\n  private rootState: State;\n  names: {};\n  map = map;\n\n  delegate: {\n    contextEntered?: (this: undefined, target, match) => void;\n    willAddRoute?: (this: undefined, context, route) => void;\n  } | undefined;\n\n  static VERSION = '0.3.0';\n  // Set to false to opt-out of encoding and decoding path segments.\n  // See https://github.com/tildeio/route-recognizer/pull/55\n  static ENCODE_AND_DECODE_PATH_SEGMENTS = true;\n  static Normalizer = {\n    normalizeSegment, normalizePath, encodePathSegment\n  };\n\n  constructor() {\n    this.rootState = new State();\n    this.names = {};\n  }\n\n  add(routes, options?: any) {\n    var currentState = this.rootState, regex = \"^\",\n        types = { statics: 0, dynamics: 0, stars: 0 },\n        handlers = new Array(routes.length), allSegments: any[] = [], name;\n\n    var isEmpty = true;\n\n    for (var i=0; i<routes.length; i++) {\n      var route = routes[i], names = [], shouldDecodes = [];\n\n      var segments = parse(route.path, names, types, shouldDecodes);\n\n      allSegments = allSegments.concat(segments);\n\n      for (var j=0; j<segments.length; j++) {\n        var segment = segments[j];\n\n        if (segment instanceof EpsilonSegment) { continue; }\n\n        isEmpty = false;\n\n        // Add a \"/\" for the new segment\n        currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: \"/\" });\n        regex += \"/\";\n\n        // Add a representation of the segment to the NFA and regex\n        currentState = segment.eachChar(currentState);\n        regex += segment.regex();\n      }\n      var handler = { handler: route.handler, names: names, shouldDecodes: shouldDecodes };\n      handlers[i] = handler;\n    }\n\n    if (isEmpty) {\n      currentState = currentState.put({ invalidChars: undefined, repeat: false, validChars: \"/\" });\n      regex += \"/\";\n    }\n\n    currentState.handlers = handlers;\n    currentState.regex = new RegExp(regex + \"$\");\n    currentState.types = types;\n\n    if (typeof options === \"object\" && options !== null && options.hasOwnProperty(\"as\")) {\n      name = options.as;\n    }\n    if (this.names.hasOwnProperty(name)) {\n      throw new Error(\"You may not add a duplicate route named `\" + name + \"`.\");\n    }\n\n    if (name = options && options.as) {\n      this.names[name] = {\n        segments: allSegments,\n        handlers: handlers\n      };\n    }\n  }\n\n  handlersFor(name) {\n    var route = this.names[name];\n\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    var result = new Array(route.handlers.length);\n\n    for (var i=0; i<route.handlers.length; i++) {\n      result[i] = route.handlers[i];\n    }\n\n    return result;\n  }\n\n  hasRoute(name) {\n    return !!this.names[name];\n  }\n\n  generate(name, params?) {\n    var route = this.names[name], output = \"\";\n    if (!route) { throw new Error(\"There is no route named \" + name); }\n\n    var segments = route.segments;\n\n    for (var i=0; i<segments.length; i++) {\n      var segment = segments[i];\n\n      if (segment instanceof EpsilonSegment) { continue; }\n\n      output += \"/\";\n      output += segment.generate(params);\n    }\n\n    if (output.charAt(0) !== '/') { output = '/' + output; }\n\n    if (params && params.queryParams) {\n      output += this.generateQueryString(params.queryParams, route.handlers);\n    }\n\n    return output;\n  }\n\n  generateQueryString(params, handlers: any) {\n    var pairs: any[] = [];\n    var keys: any[] = [];\n    for(var key in params) {\n      if (params.hasOwnProperty(key)) {\n        keys.push(key);\n      }\n    }\n    keys.sort();\n    for (var i = 0; i < keys.length; i++) {\n      key = keys[i];\n      var value = params[key];\n      if (value == null) {\n        continue;\n      }\n      var pair = encodeURIComponent(key);\n      if (isArray(value)) {\n        for (var j = 0; j < value.length; j++) {\n          var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);\n          pairs.push(arrayPair);\n        }\n      } else {\n        pair += \"=\" + encodeURIComponent(value);\n        pairs.push(pair);\n      }\n    }\n\n    if (pairs.length === 0) { return ''; }\n\n    return \"?\" + pairs.join(\"&\");\n  }\n\n  parseQueryString(queryString) {\n    var pairs = queryString.split(\"&\"), queryParams = {};\n    for(var i=0; i < pairs.length; i++) {\n      var pair      = pairs[i].split('='),\n          key       = decodeQueryParamPart(pair[0]),\n          keyLength = key.length,\n          isArray = false,\n          value;\n      if (pair.length === 1) {\n        value = 'true';\n      } else {\n        //Handle arrays\n        if (keyLength > 2 && key.slice(keyLength -2) === '[]') {\n          isArray = true;\n          key = key.slice(0, keyLength - 2);\n          if(!queryParams[key]) {\n            queryParams[key] = [];\n          }\n        }\n        value = pair[1] ? decodeQueryParamPart(pair[1]) : '';\n      }\n      if (isArray) {\n        queryParams[key].push(value);\n      } else {\n        queryParams[key] = value;\n      }\n    }\n    return queryParams;\n  }\n\n  recognize(path) {\n    var states: any[] = [ this.rootState ],\n        pathLen, i, queryStart, queryParams = {},\n        hashStart,\n        isSlashDropped = false;\n\n    hashStart = path.indexOf('#');\n    if (hashStart !== -1) {\n      path = path.substr(0, hashStart);\n    }\n\n    queryStart = path.indexOf('?');\n    if (queryStart !== -1) {\n      var queryString = path.substr(queryStart + 1, path.length);\n      path = path.substr(0, queryStart);\n      queryParams = this.parseQueryString(queryString);\n    }\n\n    if (path.charAt(0) !== \"/\") { path = \"/\" + path; }\n    var originalPath = path;\n\n    if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {\n      path = normalizePath(path);\n    } else {\n      path = decodeURI(path);\n      originalPath = decodeURI(originalPath);\n    }\n\n    pathLen = path.length;\n    if (pathLen > 1 && path.charAt(pathLen - 1) === \"/\") {\n      path = path.substr(0, pathLen - 1);\n      originalPath = originalPath.substr(0, originalPath.length - 1);\n      isSlashDropped = true;\n    }\n\n    for (i=0; i<path.length; i++) {\n      states = recognizeChar(states, path.charAt(i));\n      if (!states.length) { break; }\n    }\n\n    var solutions: any = [];\n    for (i=0; i<states.length; i++) {\n      if (states[i].handlers) { solutions.push(states[i]); }\n    }\n\n    states = sortSolutions(solutions);\n\n    var state = solutions[0];\n\n    if (state && state.handlers) {\n      // if a trailing slash was dropped and a star segment is the last segment\n      // specified, put the trailing slash back\n      if (isSlashDropped && state.regex.source.slice(-5) === \"(.+)$\") {\n         originalPath = originalPath + \"/\";\n       }\n      return findHandler(state, originalPath, queryParams);\n    }\n  }\n}\n\nexport default RouteRecognizer;\n"],"names":["const","let"],"mappings":";;;;;;AAAA,gBAAgB,IAAI,EAAE,OAAO,EAAE,QAAQ;IACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;CAC1B;AAED,MAAM,CAAC,SAAS,GAAG;IACjB,EAAE,EAAE,UAAS,MAAM,EAAE,QAAQ;QAC3B,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE7B,IAAI,QAAQ,IAAI,QAAQ,CAAC,YAAY,EAAE;YACrC,MAAM,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAC7D;QAED,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEpC,IAAI,QAAQ,EAAE;YACZ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;aAAE;YAC3G,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnE;QACD,OAAO,IAAI,CAAC;KACb;CACF,CAAC;AAEF,+BAKc,MAAY;QAClB,CAAC,MAAM,GAAG,EAAE,CAAC;QACb,CAAC,QAAQ,GAAG,EAAE,CAAC;QACf,CAAC,MAAM,GAAG,MAAM,CAAC;CACtB,CAAA;kBAED,GAAG,iBAAC,IAAI,EAAE,OAAO;QACX,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;CAC7B,CAAA;kBAED,QAAQ,sBAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ;QACnC,OAAO,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QAE1B,KAAK,GAAG,aAAa,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAE/C,QAAQ,IAAI,QAAQ,CAAC,cAAc,EAAE;gBAC/B,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACxC;YAEO,CAAC,KAAK,CAAC,CAAC;CACjB,CAAA;AAGH,uBAAuB,YAAY,EAAE,OAAO,EAAE,QAAQ;IACpD,OAAO,UAAS,IAAI,EAAE,cAAc;QAClC,IAAI,QAAQ,GAAG,YAAY,GAAG,IAAI,CAAC;QAEnC,IAAI,cAAc,EAAE;YAClB,cAAc,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC5D;aAAM;YACL,OAAO,IAAI,MAAM,CAAC,YAAY,GAAG,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SAC3D;KACF,CAAC;CACH;AAED,kBAAkB,UAAU,EAAE,IAAI,EAAE,OAAO;IACzC,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;KAClC;IAED,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACxB,IAAI,KAAK,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;IAC7C,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACxB;AAED,mBAAmB,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO;IACtD,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAE5B,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;QACvB,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC/B,IAAI,UAAU,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;YACnC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAEzC,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC1B,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;aAClE;iBAAM;gBACL,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;aACpC;SACF;KACF;CACF;AAED,cAAwB,QAAQ,EAAE,gBAAiB;IACjD,IAAI,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;IAE5B,QAAQ,CAAC,aAAa,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEpD,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,UAAS,KAAK;QACnC,IAAI,gBAAgB,EAAE;YAAE,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAAE;aACnD;YAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAAE;KAC1B,EAAE,IAAI,CAAC,CAAC;CACV;;ACtGD;;;;;AAIA,uBAA8B,IAAI;IAChC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;SACV,GAAG,CAAC,gBAAgB,CAAC;SACrB,IAAI,CAAC,GAAG,CAAC,CAAC;CACvB;;;;AAKD,IAAI,sBAAsB,GAAG,OAAO,CAAC;AACrC,0BAAiC,OAAO;IACtC,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;CACxF;;;;;;;;;;;AAYD,IAAI,sBAAsB,GAAG,+BAA+B,CAAC;AAE7D,2BAAkC,GAAG;IACnC,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;CACpF;;AC7BDA,IAAM,QAAQ,GAAG;IACf,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAC5B,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;CACnC,CAAC;AAEFA,IAAM,WAAW,GAAG,IAAI,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,CAAC,CAAC;AAExEA,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,IAAI,iBAAiB,KAAY;IAC5D,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,gBAAgB,CAAC;CACnE,CAAA;AAED,kBAAkB,MAA8B,EAAE,GAA2B;IAC3E,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,EAAE;QACjD,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;KAClF;IAED,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,0BAA0B,GAAG,GAAG,GAAG,kBAAkB,CAAC,CAAC;KACxE;IAEDC,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IACxBA,IAAI,GAAG,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,KAAK,GAAG,EAAE,GAAG,KAAK,CAAC;IACzD,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;KAC5D;IACD,OAAO,GAAG,CAAC;CACZ;;;;;;;;;;;;;;;;;AAkBD,2CAGc,MAAc;QACpB,CAAC,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;CACxC,CAAA;wBAED,QAAQ,sBAAC,YAAY;QACf,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC;SAExB,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;UAChC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACV,GAAG,YAAY,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;KAC7F;WAEM,YAAY,CAAC;CACrB,CAAA;wBAED,KAAK;WACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;CACjD,CAAA;wBAED,QAAQ;WACC,IAAI,CAAC,MAAM,CAAC;CACpB,CAAA;AAGH,6CAEc,IAAY;QAClB,CAAC,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;CACpC,CAAA;yBAED,QAAQ,sBAAC,YAAY;WACZ,YAAY,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;CACrF,CAAA;yBAED,KAAK;WACI,SAAS,CAAC;CAClB,CAAA;yBAED,QAAQ,sBAAC,MAAc;QACjB,KAAK,GAAG,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpC,eAAe,CAAC,+BAA+B,EAAE;eAC5C,iBAAiB,CAAC,KAAK,CAAC,CAAC;KACjC;SAAM;eACE,KAAK,CAAC;KACd;CACF,CAAA;AAGH,qBAAqB,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE;AAChD,WAAW,CAAC,SAAS,GAAG;IACtB,QAAQ,EAAE,UAAS,YAAY;QAC7B,OAAO,YAAY,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;KACpF;IAED,KAAK,EAAE;QACL,OAAO,MAAM,CAAC;KACf;IAED,QAAQ,EAAE,UAAS,MAAM;QACvB,OAAO,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;CACF,CAAC;AAEF,6BAA4B;AAC5B,cAAc,CAAC,SAAS,GAAG;IACzB,QAAQ,EAAE,UAAS,YAAY;QAC7B,OAAO,YAAY,CAAC;KACrB;IACD,KAAK,EAAE,cAAa,OAAO,EAAE,CAAC,EAAE;IAChC,QAAQ,EAAE,cAAa,OAAO,EAAE,CAAC,EAAE;CACpC,CAAC;;;;AAKF,eAAe,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa;;;IAG/C,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAAE,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KAAE;IAEzD,IAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAEzC,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;QAEjC,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;YACxC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACrB,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzB,KAAK,CAAC,QAAQ,EAAE,CAAC;SAClB;aAAM,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;YAChD,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACrB,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1B,KAAK,CAAC,KAAK,EAAE,CAAC;SACf;aAAM,IAAG,OAAO,KAAK,EAAE,EAAE;YACxB,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,cAAc,EAAE,CAAC;SACnC;aAAM;YACL,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC;YACxC,KAAK,CAAC,OAAO,EAAE,CAAC;SACjB;KACF;IAED,OAAO,OAAO,CAAC;CAChB;AAED,yBAAyB,KAAK,EAAE,KAAK;IACnC,OAAO,KAAK,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU;QACrC,KAAK,CAAC,YAAY,KAAK,KAAK,CAAC,YAAY,CAAC;CAClD;;;;;;;;;;;;;;;;;AAmBD,2BAQe,QAAc;QACrB,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACrB,CAAC,UAAU,GAAG,EAAE,CAAC;QACjB,CAAC,KAAK,GAAG,SAAS,CAAC;QACnB,CAAC,QAAQ,GAAG,SAAS,CAAC;QACtB,CAAC,WAAW,GAAG,SAAS,CAAC;CAC9B,CAAA;gBAED,GAAG,iBAAC,QAAQ;QACN,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;SAE5B,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAEtB,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;mBACtC,KAAK,CAAC;SACd;KACF;CACF,CAAA;gBAED,GAAG,iBAAC,QAAQ;QACN,KAAK,CAAC;;;QAIN,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;eAAS,KAAK,CAAC;KAAE;;SAG5C,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;;QAGxB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;;;QAKxB,QAAQ,CAAC,MAAM,EAAE;aACd,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B;;WAGM,KAAK,CAAC;CACd,CAAA;;gBAGD,KAAK,mBAAC,EAAE;QACF,UAAU,GAAG,IAAI,CAAC,UAAU,EAC5B,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC;QAEvB,QAAQ,GAAU,EAAE,CAAC;SAEpB,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;aACjC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAEd,GAAG,KAAK,CAAC,QAAQ,CAAC;YAEtB,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,KAAK,WAAW,EAAE;gBACpD,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;wBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAAE;SACxD;aAAM,IAAI,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,YAAY,CAAC,KAAK,WAAW,EAAE;gBAC7D,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;wBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAAE;SACxD;KACF;WAEM,QAAQ,CAAC;CACjB,CAAA;;;;;;;;;;;AAaH,uBAAuB,MAAM;IAC3B,OAAO,MAAM,CAAC,IAAI,CAAC,UAAS,CAAC,EAAE,CAAC;QAC9B,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE;YAAE,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;SAAE;QAE9E,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE;YACjB,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE;gBAAE,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;aAAE;YACtF,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,KAAK,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE;gBAAE,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;aAAE;SAC3F;QAED,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,KAAK,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE;YAAE,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;SAAE;QAC1F,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE;YAAE,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;SAAE;QAEtF,OAAO,CAAC,CAAC;KACV,CAAC,CAAC;CACJ;AAED,uBAAuB,MAAM,EAAE,EAAE;IAC/B,IAAI,UAAU,GAAG,EAAE,CAAC;IAEpB,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QACvC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAEtB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;KACjD;IAED,OAAO,UAAU,CAAC;CACnB;AAED,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM,IAAI,UAAS,KAAK;IAC3C,gBAAe;IACf,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;IACpB,OAAO,IAAI,CAAC,EAAE,CAAC;CAChB,CAAC;AAEF,0BAA0B,WAAW;IACnC,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,EAAE,CAAC;CACtC;AACD,gBAAgB,CAAC,SAAS,GAAG,OAAO,CAAC;IACnC,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;IAC9B,KAAK,EAAG,KAAK,CAAC,SAAS,CAAC,KAAK;IAC7B,IAAI,EAAI,KAAK,CAAC,SAAS,CAAC,IAAI;IAC5B,MAAM,EAAE,CAAC;IACT,WAAW,EAAE,IAAI;CAClB,CAAC,CAAC;AAEH,qBAAqB,KAAK,EAAE,YAAY,EAAE,WAAW;IACnD,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,EAAE,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IACnD,IAAI,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,cAAc,GAAG,CAAC,CAAC;IAC7D,IAAI,MAAM,GAAG,IAAI,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAE/C,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;IAEhC,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,OAAO,CAAC,KAAK,EAC9C,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,MAAM,GAAG,EAAE,CAAC;QACrD,IAAI,IAAI,EAAE,YAAY,EAAE,OAAO,CAAC;QAEhC,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAChB,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,GAAG,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;YAErC,IAAI,eAAe,CAAC,+BAA+B,EAAE;gBACnD,IAAI,YAAY,EAAE;oBAChB,MAAM,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;iBAC5C;qBAAM;oBACL,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;iBACxB;aACF;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;aACxB;SACF;QAED,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;KACrF;IAED,OAAO,MAAM,CAAC;CACf;AAED,8BAA8B,IAAI;;IAEhC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACnC,IAAI,MAAM,CAAC;IACX,IAAI;QACF,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;KAClC;IAAA,OAAM,KAAK,EAAE;QAAC,MAAM,GAAG,EAAE,CAAC;KAAC;IAC7B,OAAO,MAAM,CAAC;CACf;;AAID;YAGK,GAAG,GAAG,CAAC;QAgBJ,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAC;QACzB,CAAC,KAAK,GAAG,EAAE,CAAC;CACjB,CAAA;0BAED,GAAG,iBAAC,MAAM,EAAE,OAAa;QACnB,YAAY,GAAG,IAAI,CAAC,SAAS,EAAE,KAAK,GAAG,GAAG,EAC1C,KAAK,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAC7C,QAAQ,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,WAAW,GAAU,EAAE,EAAE,IAAI,CAAC;QAEnE,OAAO,GAAG,IAAI,CAAC;SAEd,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9B,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,aAAa,GAAG,EAAE,CAAC;YAElD,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;mBAEnD,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAEtC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAChC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBAEtB,OAAO,YAAY,cAAc,EAAE;yBAAW;aAAE;mBAE7C,GAAG,KAAK,CAAC;;wBAGJ,GAAG,YAAY,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;iBACxF,IAAI,GAAG,CAAC;;wBAGD,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;iBACzC,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;SAC1B;YACG,OAAO,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;gBAC7E,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;KACvB;QAEG,OAAO,EAAE;oBACC,GAAG,YAAY,CAAC,GAAG,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;aACxF,IAAI,GAAG,CAAC;KACd;gBAEW,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACrB,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;gBACjC,CAAC,KAAK,GAAG,KAAK,CAAC;QAEvB,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC/E,GAAG,OAAO,CAAC,EAAE,CAAC;KACnB;QACG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;cAC7B,IAAI,KAAK,CAAC,2CAA2C,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;KAC5E;QAEG,IAAI,GAAG,OAAO,IAAI,OAAO,CAAC,EAAE,EAAE;YAC5B,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG;oBACT,EAAE,WAAW;oBACb,EAAE,QAAQ;SACnB,CAAC;KACH;CACF,CAAA;0BAED,WAAW,yBAAC,IAAI;QACV,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEzB,CAAC,KAAK,EAAE;cAAQ,IAAI,KAAK,CAAC,0BAA0B,GAAG,IAAI,CAAC,CAAC;KAAE;QAE/D,MAAM,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;SAEzC,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;cACpC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KAC/B;WAEM,MAAM,CAAC;CACf,CAAA;0BAED,QAAQ,sBAAC,IAAI;WACJ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;CAC3B,CAAA;0BAED,QAAQ,sBAAC,IAAI,EAAE,MAAO;QAChB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC;QACtC,CAAC,KAAK,EAAE;cAAQ,IAAI,KAAK,CAAC,0BAA0B,GAAG,IAAI,CAAC,CAAC;KAAE;QAE/D,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;SAEzB,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAEtB,OAAO,YAAY,cAAc,EAAE;qBAAW;SAAE;cAE9C,IAAI,GAAG,CAAC;cACR,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACpC;QAEG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;cAAQ,GAAG,GAAG,GAAG,MAAM,CAAC;KAAE;QAEpD,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE;cAC1B,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;KACxE;WAEM,MAAM,CAAC;CACf,CAAA;0BAED,mBAAmB,iCAAC,MAAM,EAAE,QAAa;QACnC,KAAK,GAAU,EAAE,CAAC;QAClB,IAAI,GAAU,EAAE,CAAC;SACjB,IAAI,GAAG,IAAI,MAAM,EAAE;YACjB,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC1B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;QACG,CAAC,IAAI,EAAE,CAAC;SACP,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;WACjC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACV,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YACpB,KAAK,IAAI,IAAI,EAAE;qBACR;SACV;YACG,IAAI,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;YAC/B,OAAO,CAAC,KAAK,CAAC,EAAE;iBACb,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACjC,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC3D,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACvB;SACF;aAAM;gBACD,IAAI,GAAG,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;iBACnC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;KACF;QAEG,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;eAAS,EAAE,CAAC;KAAE;WAE/B,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;CAC9B,CAAA;0BAED,gBAAgB,8BAAC,WAAW;QACtB,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,WAAW,GAAG,EAAE,CAAC;SACjD,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9B,IAAI,GAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAC/B,GAAG,GAAS,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACzC,SAAS,GAAG,GAAG,CAAC,MAAM,EACtB,OAAO,GAAG,KAAK,EACf,KAAK,CAAC;YACN,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;iBAChB,GAAG,MAAM,CAAC;SAChB;aAAM;;gBAED,SAAS,GAAG,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,SAAS,GAAE,CAAC,CAAC,KAAK,IAAI,EAAE;uBAC9C,GAAG,IAAI,CAAC;mBACZ,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;oBAC/B,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;+BACT,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;iBACvB;aACF;iBACI,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;SACtD;YACG,OAAO,EAAE;uBACA,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC9B;aAAM;uBACM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SAC1B;KACF;WACM,WAAW,CAAC;CACpB,CAAA;0BAED,SAAS,uBAAC,IAAI;QACR,MAAM,GAAU,CAAE,IAAI,CAAC,SAAS,CAAE,EAClC,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,WAAW,GAAG,EAAE,EACxC,SAAS,EACT,cAAc,GAAG,KAAK,CAAC;aAElB,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC1B,SAAS,KAAK,CAAC,CAAC,EAAE;YAChB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;KAClC;cAES,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC3B,UAAU,KAAK,CAAC,CAAC,EAAE;YACjB,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACvD,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;mBACvB,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;KAClD;QAEG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAAM,GAAG,GAAG,GAAG,IAAI,CAAC;KAAE;QAC9C,YAAY,GAAG,IAAI,CAAC;QAEpB,eAAe,CAAC,+BAA+B,EAAE;YAC/C,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;KAC5B;SAAM;YACD,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;oBACX,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;KACxC;WAEM,GAAG,IAAI,CAAC,MAAM,CAAC;QAClB,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;YAC/C,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;oBACvB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;sBACjD,GAAG,IAAI,CAAC;KACvB;SAEI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;cACtB,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,CAAC,MAAM,CAAC,MAAM,EAAE;kBAAQ;SAAE;KAC/B;QAEG,SAAS,GAAQ,EAAE,CAAC;SACnB,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1B,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;qBAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAAE;KACvD;UAEK,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;QAE9B,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAErB,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE;;;YAGvB,cAAc,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;wBACjD,GAAG,YAAY,GAAG,GAAG,CAAC;SACnC;eACK,WAAW,CAAC,KAAK,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;KACtD;CACF,CAAA;AAvOM,uBAAO,GAAG,OAAO,CAAC;;;AAGlB,+CAA+B,GAAG,IAAI,CAAC;AACvC,0BAAU,GAAG;IAClB,kBAAA,gBAAgB,EAAE,eAAA,aAAa,EAAE,mBAAA,iBAAiB;CACnD,CAAC,AAoOJ;;;;"}